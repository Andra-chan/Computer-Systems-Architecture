     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      
    14 00000000 6400                        a dw 100
    15 00000002 C8000000                    b dd 200
    16 00000006 2C01000000000000            c dq 300
    17                                  
    18                                  ; Calculati valoarea expresiei: c-b+a
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;a. fara semn
    22                                      
    23 00000000 B800000000                  mov eax, 0
    24 00000005 BB00000000                  mov ebx, 0
    25 0000000A B900000000                  mov ecx, 0 
    26 0000000F BA00000000                  mov edx, 0
    27                                      
    28 00000014 A1[06000000]                mov eax, dword[c+0]
    29 00000019 8B15[0A000000]              mov edx, dword[c+4]
    30                                      
    31 0000001F 8B1D[02000000]              mov ebx, dword[b]
    32 00000025 29D8                        sub eax, ebx
    33                                      
    34 00000027 668B1D[00000000]            mov bx, word[a]
    35 0000002E 01D8                        add eax, ebx
    36                                     
    37                                      ;b. cu semn
    38                                      
    39 00000030 B800000000                  mov eax, 0
    40 00000035 BB00000000                  mov ebx, 0
    41 0000003A B900000000                  mov ecx, 0 
    42 0000003F BA00000000                  mov edx, 0
    43                                      
    44 00000044 8B1D[06000000]              mov ebx, dword[c+0]
    45 0000004A 8B0D[0A000000]              mov ecx, dword[c+4]
    46                                      
    47 00000050 A1[02000000]                mov eax, dword[b]
    48 00000055 99                          cdq
    49 00000056 29C3                        sub ebx, eax
    50 00000058 19D1                        sbb ecx, edx
    51                                      
    52 0000005A 66A1[00000000]              mov ax, word[a]
    53 00000060 6699                        cwd
    54 00000062 6650                        push ax
    55 00000064 6652                        push dx
    56 00000066 58                          pop eax
    57                                      
    58 00000067 01D8                        add eax, ebx
    59                                      
    60                                          ; exit(0)
    61 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
