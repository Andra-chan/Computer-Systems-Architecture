     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 56616C6F6172656120-         msg_1 db 'Valoarea lui ECX este: %d', 10, 13, 0
    13 00000009 6C7569204543582065-
    13 00000012 7374653A2025640A0D-
    13 0000001B 00                 
    14 0000001C 50726F6772616D756C-         msg_2 db 'Programul se termina...', 10, 13, 0
    14 00000025 207365207465726D69-
    14 0000002E 6E612E2E2E0A0D00   
    15                                  
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 B905000000                      mov ecx, 5
    20 00000005 E312                            jecxz final
    21                                      repeta:
    22 00000007 51                              push ecx
    23                                          ; afisez valoarea lui ECX
    24 00000008 51                              push ecx
    25 00000009 68[00000000]                    push dword msg_1
    26 0000000E FF15[00000000]                  call [printf]
    27 00000014 83C408                          add esp, 4*2
    28                                          
    29 00000017 E2EE                            loop repeta
    30                                          
    31                                      final:
    32 00000019 51                          push ecx 
    33 0000001A 68[1C000000]                push dword msg_2
    34 0000001F FF15[00000000]              call [printf]
    35 00000025 83C408                      add esp, 4*2
    36                                     
    37                                      
    38                                          ; exit(0)
    39 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
