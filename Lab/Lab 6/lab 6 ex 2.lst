     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 48656C6C6F20776F72-         s db 'Hello world'
    13 00000009 6C64               
    14                                      len equ $-s             ; lungimea sirului s
    15 0000000B 00<rept>                    d times len db 0        ; in d o sa avem sirul s inversat:d = 'dlrow olleH'
    16                                      
    17                                  ; Inversam caracterele din sirul s
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B90B000000                      mov ecx, len
    21 00000005 E31B                            jecxz final
    22 00000007 BE00000000                      mov esi, 0          ; i = 0
    23 0000000C BF0B000000                      mov edi, len        ; j = len
    24 00000011 4F                              dec edi             ; j = len - 1
    25                                      repeta:
    26 00000012 8A86[00000000]                  mov al, [s+esi]     ;s[i]
    27 00000018 8887[0B000000]                  mov [d+edi], al     ; d[j]
    28                                          
    29                                          
    30 0000001E 46                              inc esi             ; i++
    31 0000001F 4F                              dec edi
    32 00000020 E2F0                            loop repeta
    33                                          
    34                                      final:
    35                                      
    36                                          ; exit(0)
    37 00000022 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000024 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
