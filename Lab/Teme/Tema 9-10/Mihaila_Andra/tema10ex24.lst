     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf
     8                                  import exit msvcrt.dll  
     9                                  import fopen msvcrt.dll  
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; Se dau un nume de fisier si un text (definite in segmentul de date).
    14                                  ; Textul contine litere mici, litere mari, cifre si caractere speciale.
    15                                  ; Sa se inlocuiasca toate CIFRELE din textul dat cu caracterul 'C'.
    16                                  ; Sa se creeze un fisier cu numele dat si sa se scrie textul obtinut prin inlocuire in fisier.
    17                                  segment data use32 class=data
    18 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    18 00000009 7400               
    19 0000000B 7700                        mod_acces db "w", 0
    20                                      
    21 0000000D 416E612063756C6567-         text db "Ana culege 5 mere si 3 pere.", 0
    21 00000016 652035206D65726520-
    21 0000001F 736920332070657265-
    21 00000028 2E00               
    22                                      len equ $-text
    23 0000002A 00<rept>                    rezultat times len db 0
    24 00000047 3A00                        mai_mic db ':', 0
    25 00000049 2F00                        alte_caractere db'/', 0
    26                                      
    27 0000004B FFFFFFFF                    descriptor_fis dd -1         ; variabila in care vom salva descriptorul fisierului - necesar pentru a putea face referire la fisier
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 B91D000000                      mov ecx, len
    33 00000005 E367                            jecxz final
    34                                          
    35 00000007 BE[0D000000]                    mov esi, text
    36 0000000C BF[2A000000]                    mov edi, rezultat
    37                                          
    38 00000011 FC                              cld
    39                                          
    40                                      repeta:
    41 00000012 AC                              lodsb                       ; incarca primul caracter
    42 00000013 3A05[47000000]                  cmp al, [mai_mic]           ; comparam cu ':'. Daca codul hexa este mai mic, este posibil sa fie cifra
    43 00000019 7C03                            jl modifica                 ; salt 
    44                                              
    45 0000001B AA                              stosb                       ; stocheaza daca nu este ce ne trebuie
    46 0000001C EB0E                            jmp sar_peste
    47                                                  
    48                                      modifica:
    49 0000001E 3A05[49000000]                  cmp al, [alte_caractere]    ; verificam daca este cifra sau alt caracter. Daca codul hexa este mai mic ca '/', inseamna ca nu este cifra 
    50 00000024 7E05                            jle stocheaza                ; salt
    51 00000026 B043                            mov al, 'C'                 ; modifica cifra cu 'C'
    52 00000028 AA                              stosb                       ; stocheaza noul caracter
    53 00000029 EB01                            jmp sar_peste               ; salt
    54                                          
    55                                      stocheaza:                      ; daca potentiala cifra nu este corecta, se stocheaza caracterul nemodificat
    56 0000002B AA                              stosb
    57                                          
    58                                      sar_peste:    
    59 0000002C E2E4                            loop repeta 
    60                                    
    61                                          ; apelam fopen pentru a crea fisierul
    62                                          ; functia va returna in EAX descriptorul fisierului sau 0 in caz de eroare
    63 0000002E 68[0B000000]                    push dword mod_acces     
    64 00000033 68[00000000]                    push dword nume_fisier
    65 00000038 FF15[00000000]                  call [fopen]
    66 0000003E 83C408                          add esp, 4*2                ; eliberam parametrii de pe stiva
    67                                  
    68 00000041 A3[4B000000]                    mov [descriptor_fis], eax   ; salvam valoarea returnata de fopen in variabila descriptor_fis
    69                                          
    70                                          ; verificam daca functia fopen a creat cu succes fisierul (daca EAX != 0)
    71 00000046 83F800                          cmp eax, 0
    72 00000049 7423                            je final
    73                                          
    74                                          ; scriem textul in fisierul deschis folosind functia fprintf
    75 0000004B 68[2A000000]                    push dword rezultat
    76 00000050 FF35[4B000000]                  push dword [descriptor_fis]
    77 00000056 FF15[00000000]                  call [fprintf]
    78 0000005C 83C408                          add esp, 4*2
    79                                          
    80                                          ; apelam functia fclose pentru a inchide fisierul
    81 0000005F FF35[4B000000]                  push dword [descriptor_fis]
    82 00000065 FF15[00000000]                  call [fclose]
    83 0000006B 83C404                          add esp, 4
    84                                          
    85                                      final:   
    86                                          ; exit(0)
    87 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    88 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
